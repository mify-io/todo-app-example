// THIS FILE IS AUTOGENERATED, DO NOT EDIT
// Generated by mify via OpenAPI Generator

// vim: set ft=go:
package openapi

import (
	"net/http"
	"strings"

	"example.com/namespace/todo-app/go-services/internal/todo-backend/generated/api/public"
	"example.com/namespace/todo-app/go-services/internal/todo-backend/generated/core"
)

// TodosApiController binds http requests to an api service and writes the service results to the http response
type TodosApiController struct {
	ctx          *core.MifyServiceContext
	service      TodosApiServicer
	errorHandler ErrorHandler
}

// TodosApiOption for how the controller is set up.
type TodosApiOption func(*TodosApiController)

// WithTodosApiErrorHandler inject ErrorHandler into controller
func WithTodosApiErrorHandler(h ErrorHandler) TodosApiOption {
	return func(c *TodosApiController) {
		c.errorHandler = h
	}
}

// NewTodosApiController creates a default api controller
func NewTodosApiController(ctx *core.MifyServiceContext, s TodosApiServicer, opts ...TodosApiOption) Router {
	controller := &TodosApiController{
		ctx:          ctx,
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the TodosApiController
func (c *TodosApiController) Routes() Routes {
	return Routes{
		{
			"TodosGet",
			strings.ToUpper("Get"),
			"/todos",
			c.TodosGet,
		},
		{
			"TodosPost",
			strings.ToUpper("Post"),
			"/todos",
			c.TodosPost,
		},
	}
}

// TodosGet - Get list of todo notes
func (c *TodosApiController) TodosGet(w http.ResponseWriter, r *http.Request) {
	var handlerErr error
	var requestBody []byte
	reqCtx := openapi_public.GetMifyRequestContext(r)

	var result ServiceResponse
	defer LogHandler(reqCtx, requestBody, &result, &handlerErr)()

	var herr error
	result, herr = c.service.TodosGet(reqCtx)
	// If an error occurred, encode the error with the status code
	if herr != nil {
		handlerErr = herr
		c.errorHandler(w, r, herr, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// TodosPost - Add new todo note
func (c *TodosApiController) TodosPost(w http.ResponseWriter, r *http.Request) {
	var handlerErr error
	var requestBody []byte
	todoNoteCreateRequestParamRaw := TodoNoteCreateRequest{}
	var rerr error
	requestBody, rerr = readBody(r.Body)
	if rerr != nil {
		handlerErr = rerr
		c.errorHandler(w, r, &ParsingError{Err: rerr}, nil)
		return
	}
	d := getBodyDecoder(requestBody)
	d.DisallowUnknownFields()
	if err := d.Decode(&todoNoteCreateRequestParamRaw); err != nil {
		handlerErr = err
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTodoNoteCreateRequestRequired(todoNoteCreateRequestParamRaw); err != nil {
		handlerErr = err
		c.errorHandler(w, r, err, nil)
		return
	}

	todoNoteCreateRequestParam := todoNoteCreateRequestParamRaw

	reqCtx := openapi_public.GetMifyRequestContext(r)

	var result ServiceResponse
	defer LogHandler(reqCtx, requestBody, &result, &handlerErr)()

	var herr error
	result, herr = c.service.TodosPost(reqCtx, todoNoteCreateRequestParam)
	// If an error occurred, encode the error with the status code
	if herr != nil {
		handlerErr = herr
		c.errorHandler(w, r, herr, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}
