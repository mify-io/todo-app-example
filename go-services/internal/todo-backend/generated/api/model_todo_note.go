// THIS FILE IS AUTOGENERATED, DO NOT EDIT
// Generated by mify via OpenAPI Generator

// vim: set ft=go:
package openapi

type TodoNote struct {
	Description string `json:"description,omitempty"`

	Title string `json:"title"`

	IsCompleted bool `json:"is_completed,omitempty"`

	CreatedAt string `json:"created_at"`

	Id int64 `json:"id"`

	UpdatedAt string `json:"updated_at"`
}

// AssertTodoNoteRequired checks if the required fields are not zero-ed
func AssertTodoNoteRequired(obj TodoNote) error {
	elements := map[string]interface{}{
		"title":      obj.Title,
		"created_at": obj.CreatedAt,
		"id":         obj.Id,
		"updated_at": obj.UpdatedAt,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseTodoNoteRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of TodoNote (e.g. [][]TodoNote), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseTodoNoteRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aTodoNote, ok := obj.(TodoNote)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertTodoNoteRequired(aTodoNote)
	})
}
